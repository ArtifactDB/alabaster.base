% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/loadObject.R
\name{loadObject}
\alias{loadObject}
\alias{.loadObjectInternal}
\alias{schemaLocations}
\alias{customloadObjectHelper}
\title{Load an object from its metadata}
\usage{
loadObject(info, project, ...)

customloadObjectHelper(
  info,
  project,
  ...,
  .locations,
  .memory,
  .fallback = NULL
)
}
\arguments{
\item{info}{Named list containing the metadata for this object.}

\item{project}{Any argument accepted by the acquisition functions, see \code{?\link{acquireFile}}.
By default, this should be a string containing the path to a staging directory.}

\item{...}{Further arguments to pass to the specific loading function listed in the schema.}

\item{.locations}{Character vector of package names containing application-specific schemas.}

\item{.memory}{An environment used to cache the loading functions, to avoid extra schema file reads on subsequent calls.}

\item{.fallback}{Function that accepts a schema string (e.g., \code{"data_frame/v1.json"}) and returns the path to a schema.
If \code{NULL}, no fallback is used and an error is raised if the schema cannot be found.}
}
\value{
An object corresponding to \code{info}, as defined by the loading function.
}
\description{
Load an object from its metadata, based on the loading function specified in its schema.
}
\details{
The \code{loadObject} function loads an object from file into memory based on the schema specified in \code{info},
effectively reversing the activity of the corresponding \code{\link{stageObject}} method.
It does so by extracting the name of the appropriate loading function from the \code{_attributes.restore.R} property of the schema;
this should be a string that contains a namespaced function, which can be parsed and evaluated to obtain said function.
\code{loadObject} will then call the loading function with the supplied arguments.
}
\section{Comments for extension developers}{

When writing alabaster extensions, developers may need to load child objects inside the loading functions for their classes. 
In such cases, developers should use \code{\link{.loadObject}} rather than calling \code{\link{loadObject}} directly.
This ensures that any application-level overrides of the loading functions are respected. 
Once in memory, the child objects can then be assembled into more complex objects by the developer's loading function.

By default, \code{loadObject} will look through the schemas in \pkg{alabaster.schemas} to find the schema specified in \code{info$`$schema`}.
Developers of alabaster extensions can temporarily add extra packages to the schema search path by supplying package names in the \code{alabaster.schema.locations} option;
schema files are expected to be stored in the \code{schemas} subdirectory of each package's installation directory. 
In the long term, extension developers should request the addition of their packages to \code{loadObject}'s default search path.
}

\section{Comments for application developers}{

Application developers can override the behavior of \code{loadObject} by specifying a custom function in \code{\link{.altLoadObject}}.
This is typically used to point to a different set of application-specific schemas, 
which in turn point to (potentially custom) loading functions in their \code{_application.restore.R} properties.
In most applications, the override should be defined with \code{customloadObjectHelper}, which simplifies the process of specifying a different set of schemas.
}

\examples{
# Same example as stageObject, but reversed.
library(S4Vectors)
df <- DataFrame(A=1:10, B=LETTERS[1:10])

# First staging it:
tmp <- tempfile()
dir.create(tmp)
out <- stageObject(df, tmp, path="coldata")

# Loading it:
loadObject(out, tmp)

}
\author{
Aaron Lun
}
