% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R
\name{stageObject}
\alias{stageObject}
\alias{stageObject,ANY-method}
\alias{.searchForMethods}
\title{Stage assorted objects}
\usage{
stageObject(x, dir, path, child = FALSE, ...)
}
\arguments{
\item{x}{A Bioconductor object of the specified class.}

\item{dir}{String containing the path to the staging directory.}

\item{path}{String containing a prefix of the relative path inside \code{dir} where \code{x} is to be saved.
The actual path used to save \code{x} may include additional components, see Details.}

\item{child}{Logical scalar indicating whether \code{x} is a child of a larger object.}

\item{...}{Further arguments to pass to specific methods.}
}
\value{
\code{dir} is populated with files containing the contents of \code{x}.
All created files should be prefixed by \code{path}, either in the file name or as part of a subdirectory path.

A named list containing the metadata for \code{x} is returned, containing at least:
\itemize{
\item \code{$schema}, a string specifying the schema to use to validate the metadata.
This may be decorated with the \code{package} attribute to help \code{\link{.writeMetadata}} find the package containing the schema.
\item \code{path}, a string containing the path to some file prefixed by the input \code{path}.
\item \code{is_child}, a logical scalar equal to the input \code{child}. 
}
All files created by a \code{stageObject} method should be referenced from the metadata list, directly or otherwise (e.g., via child resources).
}
\description{
Generic to stage assorted R objects.
More methods may be defined by other packages to extend the \pkg{alabaster.base} framework to new classes.
}
\details{
All methods are expected to add more path components to the end of the input \code{path} when saving \code{x}.
More specifically, a subdirectory should be created at the input \code{path}; all artifacts required to represent \code{x} should be created inside this subdirectory.
Each artifact is associated with its own metadata, staging and loading methods, making it easy to decompose complex objects into manageable components.

Exactly one artifact in this subdirectory should be marked \code{is_child = FALSE} and should reference (indirectly or otherwise) all other artifacts with \code{is_child = TRUE}.
The non-child artifact is considered the \dQuote{entrypoint} file that should be referenced by \code{loadObject} to restore \code{x} in memory.
Keep in mind that the path of the entrypoint will differ from the input \code{path};
if the former is needed (e.g., to reference \code{x} from the metadata of a larger object), use the \code{path} string returned in the output list.

If a method for this generic needs to stage child artifacts, it should call \code{\link{.stageObject}} rather than \code{stageObject} (note the period at the start of the former).
This ensures that the staging method will respect customizations from alabaster applications that define their own generic in \code{\link{.altStageObject}}.

The \code{stageObject} generic will also check if the \code{path} already exists before dispatching to the methods.
If so, it will throw an error to ensure that downstream name clashes do not occur.
The exception is if \code{path = "."}, in which case no check is performed; this is useful for eliminating subdirectories in situations where the project contains only one object.
}
\examples{
tmp <- tempfile()
dir.create(tmp)

library(S4Vectors)
X <- DataFrame(X=LETTERS, Y=sample(3, 26, replace=TRUE))
stageObject(X, tmp, path="test1")
list.files(file.path(tmp, "test1"))

}
\author{
Aaron Lun
}
