% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readObject.R
\name{readObject}
\alias{readObject}
\alias{loadObject}
\alias{schemaLocations}
\alias{customLoadObjectHelper}
\alias{.loadObjectInternal}
\alias{readObjectFunctionRegistry}
\alias{registerReadObjectFunction}
\title{Read an object from disk}
\usage{
readObject(path, ...)

readObjectFunctionRegistry()

registerReadObjectFunction(type, fun)
}
\arguments{
\item{path}{String containing a path to a directory, itself created with a \code{\link{saveObject}} method.}

\item{...}{Further arguments to pass to individual methods.}

\item{type}{String specifying the name of type to register.}

\item{fun}{A loading function that accepts \code{path} and \code{...}, and returns the associated object.
This may also be \code{NULL} to delete an existing registry.}
}
\value{
For \code{readObject}, an object created from the on-disk representation in \code{path}.

For \code{readObjectFunctionRegistry}, a named list of functions used to load each object type.

For \code{registerReadObjectFunction}, the function is added to the registry.
}
\description{
Read an object from its on-disk representation.
This is done dispatching to an appropriate loading function based on the type in the \code{OBJECT} file.
}
\section{Comments for extension developers}{

When writing alabaster extensions, developers may need to load child objects inside the loading functions for their classes. 
In such cases, developers should use \code{\link{altRoadObject}} rather than calling \code{readObject} directly.
This ensures that any application-level overrides of the loading functions are respected. 
Once in memory, the child objects can then be assembled into more complex objects by the developer's loading function.

\code{readObject} uses an internal registry of functions to decide how an object should be loaded into memory.
Developers of alabaster extensions can add extra functions to this registry, usually in the \code{\link{.onLoad}} function of their packages.
Alternatively, extension developers can request the addition of their packages to default registry.

If a loading function makes use of additional arguments, it should be scoped by the name of the class for each method, e.g., \code{list.parallel}, \code{dataframe.include.nested}.
This avoids problems with conflicts in the interpretation of identically named arguments between different functions.
It is expected that arguments in \code{...} are forwarded to internal \code{\link{altReadObject}} calls.
}

\section{Comments for application developers}{

Application developers can override the behavior of \code{readObject} by specifying a custom function in \code{\link{altReadObject}}.
This is typically used to point to a different set of application-specific schemas, 
which in turn point to (potentially custom) reading functions in their \code{_application.restore.R} properties.
In most applications, the override should be defined with \code{customreadObjectHelper}, which simplifies the process of specifying a different set of schemas.
}

\examples{
# Same example as stageObject, but reversed.
library(S4Vectors)
df <- DataFrame(A=1:10, B=LETTERS[1:10])

tmp <- tempfile()
out <- stageObject(df, tmp)
readObject(out, tmp)

}
\author{
Aaron Lun
}
