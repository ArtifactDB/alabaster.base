% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/altReadObject.R
\name{altReadObject}
\alias{altReadObject}
\alias{.altReadObject}
\alias{.readObject}
\alias{altReadObjectFunction}
\title{Alter the reading function}
\usage{
altReadObject(...)

altReadObjectFunction(fun)
}
\arguments{
\item{...}{Further arguments to pass to \code{\link{readObject}} or its equivalent.}

\item{fun}{Function that can serve as a drop-in replacement for \code{\link{readObject}}.}
}
\value{
For \code{altReadObject}, any R object similar to those returned by \code{\link{readObject}}.

For \code{altReadObjectFunction}, the alternative function (if any) is returned if \code{fun} is missing.
If \code{fun} is provided, it is used to define the alternative, and the previous alternative is returned.
}
\description{
Allow alabaster applications to specify an alternative reading function in \code{\link{altReadObject}}.
}
\details{
\code{altReadObject} is just a wrapper around \code{\link{readObject}} that responds to any setting of \code{altReadObjectFunction}.
This allows alabaster applications to inject customizations into the reading process, e.g., to add more metadata to particular objects.
Developers of alabaster extensions should use \code{altReadObject} (instead of \code{readObject}) to read child objects when writing their own reading functions,
to ensure that application-specific customizations are respected for the children.

To motivate the use of \code{altReadObject}, consider the following scenario.
\enumerate{
\item We have created a reading function \code{readX} function to read an instance of class X in an alabaster extension.
This function may be called by \code{\link{readObject}} if instances of X are children of other objects.
\item An alabaster application Y requires the addition of some custom metadata during the reading process for X.
It defines an alternative reading function \code{readObject2} that, upon encountering a schema for X, redirects to a application-specific reader \code{readX2}.
An example implementation for \code{readX2} would involve calling \code{readX} and decorating the result with the extra metadata.
\item When operating in the context of application Y, the \code{readObject2} generic is used to set \code{altReadObjectFunction}.
Any calls to \code{altReadObject} in Y's context will subsequently call \code{readObject2}.
\item So, when writing a reading function in an alabaster extension for a class that might contain instances of X as children, 
we use \code{\link{altReadObject}} instead of directly using \code{\link{readObject}}. 
This ensures that, if a child instance of X is encountered \emph{and} we are operating in the context of application Y, 
we correctly call \code{readObject2} and then ultimately \code{readX2}.
}
}
\examples{
old <- altReadObjectFunction()

# Setting it to something.
altReadObjectFunction(function(...) {
    print("YAY")
    readObject(...) 
})

# Staging an example DataFrame:
library(S4Vectors)
df <- DataFrame(A=1:10, B=LETTERS[1:10])
tmp <- tempfile()
dir.create(tmp)
out <- stageObject(df, tmp, path="coldata")

# And now reading it - this should print our message.
altReadObject(out, tmp)

# Restoring the old reader:
altReadObjectFunction(old)

}
\author{
Aaron Lun
}
