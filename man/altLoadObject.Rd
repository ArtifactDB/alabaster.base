% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/altLoadObject.R
\name{.loadObject}
\alias{.loadObject}
\alias{.altLoadObject}
\title{Alter the loading function}
\usage{
.loadObject(...)

.altLoadObject(load)
}
\arguments{
\item{...}{Further arguments to pass to \code{\link{loadObject}} or its equivalent.}

\item{load}{Function that can serve as a drop-in replacement for \code{\link{loadObject}}.}
}
\value{
For \code{.loadObject}, any R object similar to those returned by \code{\link{loadObject}}.

For \code{.altLoadObject}, the alternative function (if any) is returned if \code{load} is missing.
If \code{load} is provided, it is used to define the alternative, and the previous alternative is returned.
}
\description{
Allow Artificer applications to specify an alternative loading function in \code{\link{.loadObject}}.
}
\details{
\code{.loadObject} is just a wrapper around \code{\link{loadObject}} that responds to any setting of \code{.altLoadObject}.
This allows Artificer applications to inject customizations into the loading process, e.g., to add more metadata to particular objects.
Developers of Artificer extensions should use \code{.loadObject} to load child objects when writing their own loading functions.

To motivate the use of \code{.loadObject}, consider the following scenario.
\enumerate{
\item We have created a loading function \code{loadX} function to load an instance of class X in an Artificer extension.
This function may be called by \code{\link{loadObject}} if instances of X are children of other objects.
\item An Artificer application Y requires the addition of some custom metadata during the loading process for X.
It defines an alternative loading function \code{loadObject2} that, upon encountering a schema for X, redirects to a application-specific loader \code{loadX2}.
A typical implementation for \code{loadX2} would be to call \code{loadX} and decorate the result with the necessary metadata.
\item When operating in the context of application Y, the \code{loadObject2} generic is used to set \code{.altLoadObject}.
Any calls to \code{.loadObject} in Y's context will subsequently call \code{loadObject2}.
\item So, when writing a loading function in an Artificer extension for a class that might contain X as children, 
we use \code{\link{.loadObject}} instead of directly using \code{\link{loadObject}}. 
This ensures that, if a child instance of X is encountered \emph{and} we are operating in the context of application Y, 
we correctly call \code{loadObject2} and then ultimately \code{loadX2}.
}

For \emph{application} developers: the alternative loading function for X should \emph{not} call \code{.loadObject} on the same instance of X.
Doing so will introduce an infinite recursion where \code{.loadObject} calls the alternative function that then calls \code{.loadObject}, etc.
Rather, developers should either call \code{loadObject} or \code{loadX} directly.
For child objects, no infinite recursion will occur and \code{loadObject2} or \code{.loadObject} can be used.
}
\author{
Aaron Lun
}
