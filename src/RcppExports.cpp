// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// check_csv
Rcpp::RObject check_csv(std::string path, bool is_compressed, bool parallel);
RcppExport SEXP _alabaster_base_check_csv(SEXP pathSEXP, SEXP is_compressedSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type is_compressed(is_compressedSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(check_csv(path, is_compressed, parallel));
    return rcpp_result_gen;
END_RCPP
}
// check_csv_df
Rcpp::RObject check_csv_df(std::string path, int nrows, bool has_row_names, Rcpp::CharacterVector column_names, Rcpp::IntegerVector column_types, Rcpp::IntegerVector string_formats, Rcpp::List factor_levels, int df_version, bool is_compressed, bool parallel);
RcppExport SEXP _alabaster_base_check_csv_df(SEXP pathSEXP, SEXP nrowsSEXP, SEXP has_row_namesSEXP, SEXP column_namesSEXP, SEXP column_typesSEXP, SEXP string_formatsSEXP, SEXP factor_levelsSEXP, SEXP df_versionSEXP, SEXP is_compressedSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_row_names(has_row_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type column_names(column_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type column_types(column_typesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type string_formats(string_formatsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type factor_levels(factor_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type df_version(df_versionSEXP);
    Rcpp::traits::input_parameter< bool >::type is_compressed(is_compressedSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(check_csv_df(path, nrows, has_row_names, column_names, column_types, string_formats, factor_levels, df_version, is_compressed, parallel));
    return rcpp_result_gen;
END_RCPP
}
// check_hdf5_df
Rcpp::RObject check_hdf5_df(std::string path, std::string name, int nrows, bool has_row_names, Rcpp::CharacterVector column_names, Rcpp::IntegerVector column_types, Rcpp::IntegerVector string_formats, Rcpp::List factor_levels, int df_version, int hdf5_version);
RcppExport SEXP _alabaster_base_check_hdf5_df(SEXP pathSEXP, SEXP nameSEXP, SEXP nrowsSEXP, SEXP has_row_namesSEXP, SEXP column_namesSEXP, SEXP column_typesSEXP, SEXP string_formatsSEXP, SEXP factor_levelsSEXP, SEXP df_versionSEXP, SEXP hdf5_versionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_row_names(has_row_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type column_names(column_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type column_types(column_typesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type string_formats(string_formatsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type factor_levels(factor_levelsSEXP);
    Rcpp::traits::input_parameter< int >::type df_version(df_versionSEXP);
    Rcpp::traits::input_parameter< int >::type hdf5_version(hdf5_versionSEXP);
    rcpp_result_gen = Rcpp::wrap(check_hdf5_df(path, name, nrows, has_row_names, column_names, column_types, string_formats, factor_levels, df_version, hdf5_version));
    return rcpp_result_gen;
END_RCPP
}
// check_list_hdf5
SEXP check_list_hdf5(std::string file, std::string name, int num_external);
RcppExport SEXP _alabaster_base_check_list_hdf5(SEXP fileSEXP, SEXP nameSEXP, SEXP num_externalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type num_external(num_externalSEXP);
    rcpp_result_gen = Rcpp::wrap(check_list_hdf5(file, name, num_external));
    return rcpp_result_gen;
END_RCPP
}
// check_list_json
SEXP check_list_json(std::string file, int num_external, bool parallel);
RcppExport SEXP _alabaster_base_check_list_json(SEXP fileSEXP, SEXP num_externalSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type num_external(num_externalSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(check_list_json(file, num_external, parallel));
    return rcpp_result_gen;
END_RCPP
}
// load_csv
Rcpp::List load_csv(std::string path, bool is_compressed, int nrecords, bool parallel);
RcppExport SEXP _alabaster_base_load_csv(SEXP pathSEXP, SEXP is_compressedSEXP, SEXP nrecordsSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type is_compressed(is_compressedSEXP);
    Rcpp::traits::input_parameter< int >::type nrecords(nrecordsSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(load_csv(path, is_compressed, nrecords, parallel));
    return rcpp_result_gen;
END_RCPP
}
// load_list_hdf5
Rcpp::RObject load_list_hdf5(std::string file, std::string name, Rcpp::List obj);
RcppExport SEXP _alabaster_base_load_list_hdf5(SEXP fileSEXP, SEXP nameSEXP, SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(load_list_hdf5(file, name, obj));
    return rcpp_result_gen;
END_RCPP
}
// load_list_json
Rcpp::RObject load_list_json(std::string file, Rcpp::List obj, bool parallel);
RcppExport SEXP _alabaster_base_load_list_json(SEXP fileSEXP, SEXP objSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type obj(objSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(load_list_json(file, obj, parallel));
    return rcpp_result_gen;
END_RCPP
}
// write_integer_scalar
SEXP write_integer_scalar(std::string path, std::string host, std::string name, int val);
RcppExport SEXP _alabaster_base_write_integer_scalar(SEXP pathSEXP, SEXP hostSEXP, SEXP nameSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< int >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(write_integer_scalar(path, host, name, val));
    return rcpp_result_gen;
END_RCPP
}
// write_string_scalar
SEXP write_string_scalar(std::string path, std::string host, std::string name, std::string val);
RcppExport SEXP _alabaster_base_write_string_scalar(SEXP pathSEXP, SEXP hostSEXP, SEXP nameSEXP, SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type host(hostSEXP);
    Rcpp::traits::input_parameter< std::string >::type name(nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(write_string_scalar(path, host, name, val));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_alabaster_base_check_csv", (DL_FUNC) &_alabaster_base_check_csv, 3},
    {"_alabaster_base_check_csv_df", (DL_FUNC) &_alabaster_base_check_csv_df, 10},
    {"_alabaster_base_check_hdf5_df", (DL_FUNC) &_alabaster_base_check_hdf5_df, 10},
    {"_alabaster_base_check_list_hdf5", (DL_FUNC) &_alabaster_base_check_list_hdf5, 3},
    {"_alabaster_base_check_list_json", (DL_FUNC) &_alabaster_base_check_list_json, 3},
    {"_alabaster_base_load_csv", (DL_FUNC) &_alabaster_base_load_csv, 4},
    {"_alabaster_base_load_list_hdf5", (DL_FUNC) &_alabaster_base_load_list_hdf5, 3},
    {"_alabaster_base_load_list_json", (DL_FUNC) &_alabaster_base_load_list_json, 3},
    {"_alabaster_base_write_integer_scalar", (DL_FUNC) &_alabaster_base_write_integer_scalar, 4},
    {"_alabaster_base_write_string_scalar", (DL_FUNC) &_alabaster_base_write_string_scalar, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_alabaster_base(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
